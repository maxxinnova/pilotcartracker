import * as express from "express"
import * as path from "path";
import * as logger from "morgan"
import { json, urlencoded } from "body-parser"
import { IDebug } from "debug"

const cookieParser = require("cookie-parser");
const serveFavicon = require("serve-favicon");

declare var debug:IDebug;

import homeRouter from "./routes/home.router"
import loadcoveredRouter from "./routes/loadcovered.router"

var app = express();

// view engine setup
app.set("views", path.join(__dirname, "views"));
//app.set('view engine', 'pug');
app.set("view engine", "hbs");
app.set("view options", { layout: "shared/layout" });

// uncomment after placing your favicon in /public
app.use(serveFavicon(__dirname + "/public/favicon.ico"));
app.use(logger("dev"));
app.use(json());
app.use(urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));

app.use("/", homeRouter);
app.use("/api/loadCovered/message", loadcoveredRouter);

// catch 404 and forward to error handler
app.use((req, res, next) => {
    var err:any = new Error("Not Found");
    err.status = 404;
    next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get("env") === "development") {
    app.use((err: any, req: express.Request, res: express.Response) => {
        res.status(err.status || 500);
        res.render("shared/error", {
            message: err.message,
            error: err
        });
    });
}

// production error handler
// no stacktraces leaked to user
app.use((err: any, req: express.Request, res: express.Response) => {
    res.status(err.status || 500);
    res.render("shared/error", {
        message: err.message,
        error: {}
    });
});

app.set("port", process.env["PORT"] || 3000);

var server = app.listen(app.get("port"), () => {
    debug(`Express server listening on port ${server.address().port}`);
});
